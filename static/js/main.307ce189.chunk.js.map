{"version":3,"sources":["state/action_utils.ts","state/actions.ts","state/reducer.ts","app/SeasonList.tsx","app/SeasonDetail.tsx","app/AppHeader.tsx","app/OnDeck.tsx","app/App.tsx","config/config.ts","serviceWorker.ts","index.tsx","app/logo.svg"],"names":["createActionPayload","actionType","p","payload","type","Season","FETCH_SEASONS","SET_SEASON_START_DATE","AppActions","fetchSeasons","setSeasonStartDate","initialState","seasons","reducer","state","action","json","map","season","index","seasonIdx","startDate","getTime","useStyles","makeStyles","root","overflowX","margin","table","minWidth","SeasonList","onStartDateChanged","classes","Paper","className","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","key","sheetId","component","scope","to","formattedName","year","Tooltip","title","Icon","utils","DateFnsUtils","disableToolbar","variant","format","autoOk","value","onChange","date","KeyboardButtonProps","SeasonDetail","seasonId","useParams","JSON","stringify","theme","createStyles","logo","marginRight","spacing","navButton","grow","flexGrow","AppHeader","AppBar","position","Toolbar","IconButton","edge","color","src","alt","Typography","MenuItem","disableRipple","NavLink","activeClassName","exact","Button","disabled","header","typography","button","padding","marginLeft","marginBottom","width","headerSegment","paperBody","maxWidth","OnDeck","id","ep","series","App","backendURI","useReducer","dispatch","fetchSeasonData","a","axios","get","resp","data","handleStartDateChanged","newDate","post","status","path","render","match","find","String","params","onClick","configProd","BACKEND_URI","Boolean","window","location","hostname","darkTheme","createMuiTheme","palette","ReactDOM","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.307ce189.chunk.js","sourcesContent":["// Written by Patrick Desjardins\n// https://patrickdesjardins.com/blog/typescript-with-strong-typed-action-when-using-usereducer-of-react-hooks\n\n/**\n * Create an action that has a strongly typed string literal name with a\n * strongly typed payload\n */\nexport function createActionPayload<TypeAction, TypePayload>(\n    actionType: TypeAction): (payload: TypePayload) =>\n    ActionsWithPayload<TypeAction, TypePayload> {\n  return (p: TypePayload): ActionsWithPayload<TypeAction, TypePayload> => {\n    return {payload: p, type: actionType};\n  };\n}\n\n/**\n * Create an action with no payload\n */\nexport function createAction<TypeAction>(actionType: TypeAction): () =>\n    ActionsWithoutPayload<TypeAction> {\n  return (): ActionsWithoutPayload<TypeAction> => {\n    return {type: actionType};\n  };\n}\n/**\n * Create an action with a payload\n */\nexport interface ActionsWithPayload<TypeAction, TypePayload> {\n  type: TypeAction;\n  payload: TypePayload;\n}\n\n/**\n * Create an action that does not have a payload\n */\nexport interface ActionsWithoutPayload<TypeAction> {\n  type: TypeAction;\n}\n\n/**\n * A very general type that means to be \"an object with a many field created\n * with createActionPayload and createAction\n */\ninterface ActionCreatorsMapObject {\n  [key: string]: (...args: any[]) =>\n      ActionsWithPayload<any, any>| ActionsWithoutPayload<any>;\n}\n\n/**\n * Use this Type to merge several action object that has field created with\n * createActionPayload or createAction E.g. type ReducerWithActionFromTwoObjects\n * = ActionsUnion<typeof ActionsObject1 &amp; typeof ActionsObject2>;\n */\nexport type ActionsUnion<A extends ActionCreatorsMapObject> =\n    ReturnType<A[keyof A]>;\n","import {ActionsUnion, createActionPayload} from './action_utils';\nimport {SeasonModel} from './reducer';\n\nexport const FETCH_SEASONS = 'ACTION_FETCH_SEASONS';\nexport const SET_SEASON_START_DATE = 'SET_SEASON_START_DATE';\n\nexport const AppActions = {\n  fetchSeasons:\n      createActionPayload<typeof FETCH_SEASONS, {json: SeasonModel[]}>(\n          FETCH_SEASONS),\n  setSeasonStartDate: createActionPayload<\n      typeof SET_SEASON_START_DATE,\n      {seasonIdx: number, startDate: Date | null}>(SET_SEASON_START_DATE)\n};\n\nexport type AllActions = ActionsUnion<typeof AppActions>;\n","import {AllActions, FETCH_SEASONS, SET_SEASON_START_DATE} from './actions';\n\nexport enum Season {\n  UNKNOWN = 0,\n  SPRING,\n  SUMMER,\n  FALL,\n  WINTER,\n}\n\nexport interface SeasonModel {\n  formattedName: string;  // ex. 'WINTER 2014'\n  year: number;\n  season: Season;\n  sheetId: number;  // id of the sheet in the source SpreadSheet\n  // date of the first episode viewing this season in mills. null if not set\n  startDate: number|null;\n}\n\ninterface AppState {\n  seasons: SeasonModel[]\n}\n\nexport const initialState: AppState = {\n  seasons: []\n}\n\nexport function reducer(state: AppState = initialState, action: AllActions) {\n  switch (action.type) {\n    case FETCH_SEASONS:\n      return {\n        ...state, seasons: action.payload.json,\n      }\n    case SET_SEASON_START_DATE:\n      return {\n        ...state, seasons: state.seasons.map((season, index) => {\n          if (index !== action.payload.seasonIdx) {\n            // This isn't the item we care about - keep it as-is\n            return season\n          }\n\n          // Otherwise, this is the one we want - return an updated value\n          const startDate = action.payload.startDate;\n          return {\n            ...season, startDate: startDate ? startDate.getTime() : null,\n          }\n        })\n      }\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport './SeasonList.css';\nimport { SeasonModel } from '../state/reducer';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { Icon, Tooltip } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\n\nconst useStyles = makeStyles({\n  root: {\n    overflowX: 'auto',\n    margin: '0 10px',\n  },\n  table: {\n    minWidth: 650,\n  },\n});\n\ninterface SeasonListProps {\n  seasons: SeasonModel[];\n  onStartDateChanged: (date: Date | null, season: SeasonModel, index: number) => void;\n}\n\nconst SeasonList: React.FC<SeasonListProps> = ({ seasons, onStartDateChanged }) => {\n  const classes = useStyles({});\n\n  return (\n    <div>\n      <p>Seasons JSON:</p>\n      <Paper className={classes.root}>\n        <Table className={classes.table} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Season Name</TableCell>\n              <TableCell align=\"right\">Season</TableCell>\n              <TableCell align=\"right\">Year</TableCell>\n              <TableCell align=\"right\">Start&nbsp;Date&nbsp;(ms)</TableCell>\n              <TableCell align=\"right\">Sheet&nbsp;ID</TableCell>\n            </TableRow>\n          </TableHead>\n          {/* TODO Add an empty state message and a loading spinner */}\n          <TableBody>\n            {seasons.map((season, index) => (\n              <TableRow key={season.sheetId}>\n                <TableCell component=\"th\" scope=\"row\">\n                  <Link to={'/s/' + season.sheetId}>\n                    {season.formattedName}\n                  </Link>\n                </TableCell>\n                <TableCell align=\"right\">{season.season}</TableCell>\n                <TableCell align=\"right\">{season.year}</TableCell>\n                <TableCell align=\"right\">\n                  {season.startDate === null && <Tooltip title=\"Missing Start Date\">\n                    <Icon className=\"push-right warning-icon text-top\">warning</Icon>\n                  </Tooltip>}\n                  <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                    <KeyboardDatePicker\n                      disableToolbar\n                      variant=\"inline\"\n                      format=\"MM/dd/yyyy\"\n                      autoOk={true}\n                      value={season.startDate}\n                      onChange={(date) => { onStartDateChanged(date, season, index); }}\n                      KeyboardButtonProps={{\n                        'aria-label': 'change date',\n                      }}\n                    />\n                  </MuiPickersUtilsProvider>\n                </TableCell>\n                <TableCell align=\"right\">{season.sheetId}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </Paper>\n    </div>\n  );\n}\n\nexport default SeasonList;\n","import React from 'react';\nimport { SeasonModel } from '../state/reducer';\nimport { Link, useParams } from 'react-router-dom';\n\ninterface SeasonDetailProps {\n  season: SeasonModel | undefined;\n}\n\nconst SeasonDetail: React.FC<SeasonDetailProps> = ({ season }) => {\n  const { seasonId } = useParams();\n\n  return (\n    <div>\n      <Link to={\"/\"}>Back</Link>\n      <p>{seasonId}</p>\n      <p>{JSON.stringify(season)}</p>\n    </div>\n  );\n}\n\nexport default SeasonDetail;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './AppHeader.css';\nimport { Link, NavLink } from 'react-router-dom';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nconst useStyles = makeStyles((theme: Theme) => {\n  return createStyles({\n    logo: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      marginRight: theme.spacing(3),\n    },\n    navButton: {\n      marginRight: theme.spacing(1),\n    },\n    grow: {\n      flexGrow: 1,\n    },\n  });\n});\n\nconst AppHeader: React.FC = () => {\n  const classes = useStyles();\n\n  return (\n    <div>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.logo} color=\"inherit\" aria-label=\"logo\">\n            <Link to={'/'}>\n              <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            </Link>\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Friday Fellows Updater\n          </Typography>\n          <MenuItem disableRipple component={NavLink} to={'/'} activeClassName={'activeLink'} exact={true}>\n            <Button variant=\"contained\" className={classes.navButton}>On Deck</Button>\n          </MenuItem>\n          <MenuItem disableRipple component={NavLink} to={'/seasons'} activeClassName={'activeLink'}>\n            <Button variant=\"contained\" className={classes.navButton}>Seasons</Button>\n          </MenuItem>\n          <MenuItem disableRipple component={NavLink} to={'/admin'} activeClassName={'activeLink'}>\n            <Button variant=\"contained\" className={classes.navButton} disabled={true}>Admin</Button>\n          </MenuItem>\n          <div className={classes.grow} />\n          <Button color=\"inherit\">Login</Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nexport default AppHeader;\n","import React from 'react';\nimport './OnDeck.css';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableBody from '@material-ui/core/TableBody';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    header: {\n      ...theme.typography.button,\n      padding: theme.spacing(1),\n      marginLeft: 'auto',\n      marginRight: 'auto',\n      marginBottom: theme.spacing(2),\n      width: 'fit-content',\n    },\n    headerSegment: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1),\n    },\n    paperBody: {\n      margin: 'auto',\n      maxWidth: '60vw',\n    },\n    table: {\n      minWidth: 650,\n    },\n  }),\n);\n\nconst OnDeck: React.FC = () => {\n  const classes = useStyles();\n\n  const mockSeries = [\n    { id: 1, title: 'Violet Evergarden', ep: 9 },\n    { id: 2, title: 'One Piece', ep: 619 },\n    { id: 3, title: 'Kyoukai no Kanata', ep: 10 },\n    { id: 4, title: 'White Album 2', ep: 9 },\n    { id: 5, title: 'My Hero Academia', ep: 8 },\n    { id: 6, title: 'One Punch Man', ep: 10 },\n  ];\n\n  return (\n    <div>\n      <Paper className={classes.header}>\n        <span className={classes.headerSegment}>Fall 2019</span>\n        <span className={classes.headerSegment}>Week 10</span>\n        <span className={classes.headerSegment}>Next Session: 11/22/2019</span>\n      </Paper>\n      <Paper className={classes.paperBody}>\n        <Table className={classes.table} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Series Title (English</TableCell>\n              <TableCell align=\"right\">Episode</TableCell>\n            </TableRow>\n          </TableHead>\n          {/* TODO Add an empty state message and a loading spinner */}\n          <TableBody>\n            {mockSeries.map((series) => (\n              <TableRow key={series.id}>\n                <TableCell component=\"th\" scope=\"row\">{series.title}</TableCell>\n                <TableCell align=\"right\">{series.ep}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </Paper>\n    </div>\n  );\n}\n\nexport default OnDeck;\n","import React, { useReducer } from 'react';\nimport './App.css';\nimport { reducer, initialState, SeasonModel } from '../state/reducer';\nimport { AppActions } from '../state/actions';\nimport axios from 'axios';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport SeasonList from './SeasonList';\nimport SeasonDetail from './SeasonDetail';\nimport AppHeader from './AppHeader';\nimport OnDeck from './OnDeck';\n\ninterface AppProps {\n  backendURI: string;\n}\n\nconst App: React.FC<AppProps> = ({ backendURI }) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const fetchSeasonData = async () => {\n    const resp = await axios.get<SeasonModel[]>(backendURI + '/getAllSeasons');\n    dispatch(AppActions.fetchSeasons({ json: resp.data }));\n  };\n\n  const handleStartDateChanged = async (newDate: Date | null, season: SeasonModel, index: number) => {\n    const resp = await axios.post(backendURI + '/setSeasonStartDate', {\n      sheetId: season.sheetId,\n      startDate: newDate ? newDate.getTime() : null,\n    })\n    if (resp.status === 200) {\n      dispatch(AppActions.setSeasonStartDate({\n        seasonIdx: index,\n        startDate: newDate,\n      }))\n    }\n  }\n\n  function AppFooter() {\n    return (\n      <div className=\"App-footer\">\n        <button onClick={fetchSeasonData}>Fetch Season Data</button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <AppHeader />\n      <div className=\"App-body\">\n        <Switch>\n          <Route exact={true} path='/'>\n            <Redirect to='/ondeck' />\n          </Route>\n          <Route exact={true} path='/ondeck'>\n            <OnDeck />\n          </Route>\n          <Route exact={true} path='/seasons'>\n            <SeasonList seasons={state.seasons} onStartDateChanged={handleStartDateChanged} />\n          </Route>\n          <Route path='/s/:seasonId' render={({ match }) => (\n            <SeasonDetail season={state.seasons.find((season) => String(season.sheetId) === match.params.seasonId)} />\n          )} />\n        </Switch>\n      </div>\n      <AppFooter />\n    </div>\n  );\n}\n\nexport default App;\n","export default function config(): AppConfig {\n  switch (process.env.NODE_ENV) {\n    case 'production':\n      return configProd;\n    case 'development':\n      return configDev;\n    default:\n      throw new Error('NODE_ENV not set');\n  }\n}\n\ninterface AppConfig {\n  BACKEND_URI: string;\n}\n\nconst configProd = {\n  BACKEND_URI: 'https://us-central1-driven-utility-202807.cloudfunctions.net'\n}\n\nconst configDev = {\n  BACKEND_URI: 'http://localhost:5001/driven-utility-202807/us-central1'\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport config from './config/config';\nimport * as serviceWorker from './serviceWorker';\n// Using HashRouter instead of BrowserRouter for use on Github Pages\nimport { HashRouter as Router } from 'react-router-dom';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { createMuiTheme } from '@material-ui/core';\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nReactDOM.render(\n  <ThemeProvider theme={darkTheme}>\n    <Router>\n      <App backendURI={config().BACKEND_URI} />\n    </Router>\n  </ThemeProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}