{"version":3,"sources":["state/action_utils.ts","state/actions.ts","state/reducer.ts","app/SeasonList.tsx","app/SeasonDetail.tsx","app/AppHeader.tsx","app/Snackbars.tsx","app/OnDeck.tsx","app/App.tsx","config/config.ts","serviceWorker.ts","index.tsx","app/logo.svg"],"names":["createActionPayload","actionType","p","payload","type","createAction","Season","AppActions","fetchSeasonsStart","fetchSeasonsSuccess","fetchSeriesStart","fetchSeriesSuccess","fetchOnDeckStart","fetchOnDeckSuccess","setSeasonStartDate","setSeriesId","initialState","ondeck","undefined","loadingOnDeck","seasons","loadingSeasons","seriesForSeason","loadingSeries","lastSync","reducer","state","action","json","report","seasonIdx","indexOf","season","map","idx","startDate","getTime","seriesIdx","series","data","useStyles","makeStyles","theme","createStyles","header","typography","button","padding","spacing","marginLeft","marginRight","marginBottom","width","display","alignItems","title","root","overflowX","margin","table","minWidth","gridTemplateColumns","gridGap","gridCell","minHeight","textAlign","color","palette","text","secondary","whiteSpace","cellLink","textDecoration","cellBtn","height","cellTitle","verticalAlign","lineHeight","fontSize","cellDetails","gridTemplateRows","unknownLabel","backgroundColor","borderRadius","droppedLabel","watchingLabel","completedLabel","VotingStatus","SeasonList","lastSyncDate","loading","classes","SeasonGridCard","to","sheetId","className","Card","CardActionArea","formattedName","seriesStats","Paper","Tooltip","Intl","DateTimeFormat","year","month","day","format","formatLastSyncDate","aria-label","CircularProgress","size","datePicker","pushLeft","paperBody","maxWidth","SetSeriesIdDialog","props","onClose","open","useState","idAL","value","setValue","handleClose","useEffect","Dialog","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","TextField","label","variant","InputLabelProps","shrink","onChange","e","parseInt","target","DialogActions","Button","onClick","SeriesVotingGrid","seriesList","maxWeeks","reduce","max","weekNum","votingRecord","length","headers","i","push","TableCell","key","align","Table","TableHead","TableRow","TableBody","rowIndex","component","scope","raw","IconButton","href","votingStatus","record","msg","episodeNum","votesFor","votesAgainst","join","SeriesDebugGrid","openIDDialog","DialogButton","english","idMal","episodes","SeasonDetail","dispatch","backendURI","onStartDateChanged","onSeriesIdChanged","seasonId","useParams","idDialogOpen","setDialogOpen","selectedSeries","setSelectedSeries","showDebug","setShowDebug","a","axios","get","resp","console","log","fetchSeriesData","utils","DateFnsUtils","disableToolbar","inputVariant","autoOk","date","KeyboardButtonProps","ToggleButton","selected","seriesId","logo","navButton","grow","flexGrow","AppHeader","AppBar","position","Toolbar","edge","src","alt","Typography","MenuItem","disableRipple","NavLink","activeClassName","disabled","variantIcon","success","CheckCircleIcon","error","ErrorIcon","green","dark","icon","iconVariant","opacity","message","MySnackbarContentWrapper","other","Icon","SnackbarContent","clsx","ErrorSnackbar","reason","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","SuccessSnackbar","headerSegment","OnDeck","targetDate","seasonName","week","targetWatchDate","Date","episode","App","useReducer","successOpen","setSuccessOpen","successMsg","setSuccessMsg","errorOpen","setErrorOpen","errorMsg","setErrorMsg","lastSyncMs","fetchSeasonData","reports","fetchOnDeckData","handleStartDateChanged","newDate","post","status","handleSeriesIdChanged","row","exact","path","render","match","find","String","params","configProd","BACKEND_URI","Boolean","window","location","hostname","darkTheme","createMuiTheme","ReactDOM","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"iZAOO,SAASA,EACZC,GAEF,OAAO,SAACC,GACN,MAAO,CAACC,QAASD,EAAGE,KAAMH,IAOvB,SAASI,EAAyBJ,GAEvC,OAAO,WACL,MAAO,CAACG,KAAMH,ICfX,ICFKK,EDWCC,EAAa,CACxBC,kBACIH,EAX6B,8BAYjCI,oBAAqBT,EAXc,gCAcnCU,iBAAkBL,EAbc,6BAchCM,mBACIX,EAd8B,+BAgBlCY,iBAAkBP,EAfc,6BAgBhCQ,mBACIb,EAhB8B,+BAkBlCc,mBAAoBd,EAjBe,gCAoBnCe,YAAaf,EAnBc,mB,SCTjBM,O,qBAAAA,I,mBAAAA,I,mBAAAA,I,eAAAA,I,oBAAAA,M,KAkBL,IAAMU,EAAyB,CACpCC,YAAQC,EACRC,eAAe,EACfC,QAAS,GACTC,gBAAgB,EAChBC,gBAAiB,GACjBC,eAAe,EACfC,cAAUN,GAGL,SAASO,IAA6D,IAArDC,EAAoD,uDAAlCV,EAAcW,EAAoB,uCAC1E,OAAQA,EAAOvB,MACb,ID5B+B,6BC6B7B,OAAO,eACFsB,EADL,CACYL,gBAAgB,IAE9B,ID/BiC,+BCgC/B,OAAO,eACFK,EADL,CACYN,QAASO,EAAOxB,QAAQyB,KAC9BJ,SAAUG,EAAOxB,QAAQqB,SAAUH,gBAAgB,IAE3D,IDnC8B,4BCoC5B,OAAO,eACFK,EADL,CACYH,eAAe,IAE7B,IDtCgC,8BCuC9B,OAAO,eACFG,EADL,CACYJ,gBAAiBK,EAAOxB,QAAQyB,KAAML,eAAe,IAEnE,IDzC8B,4BC0C5B,OAAO,eACFG,EADL,CACYP,eAAe,IAE7B,ID5CgC,8BC6C9B,OAAO,eACFO,EADL,CACYT,OAAQU,EAAOxB,QAAQ0B,OAAQV,eAAe,IAE5D,ID/CiC,+BCgD/B,IAAMW,EAAYJ,EAAMN,QAAQW,QAAQJ,EAAOxB,QAAQ6B,QACvD,OAAO,eACFN,EADL,CACYN,QAASM,EAAMN,QAAQa,KAAI,SAACD,EAAQE,GAC5C,GAAIA,IAAQJ,EAEV,OAAOE,EAIT,IAAMG,EAAYR,EAAOxB,QAAQgC,UACjC,OAAO,eACFH,EADL,CACaG,UAAWA,EAAYA,EAAUC,UAAY,YAIhE,ID9DyB,gBC+DvB,IAAMC,EAAYX,EAAMJ,gBAAgBS,QAAQJ,EAAOxB,QAAQmC,QAC/D,OAAO,eACFZ,EADL,CACYJ,gBAAiBI,EAAMJ,gBAAgBW,KAAI,SAACK,EAAQJ,GAC5D,OAAIA,IAAQG,EAEHC,EAIF,eACFA,EADL,GACgBX,EAAOxB,QAAQoC,WAIrC,QACE,OAAOb,G,4GCnFPc,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,OAAO,eACFF,EAAMG,WAAWC,OADhB,CAEJC,QAASL,EAAMM,QAAQ,GACvBC,WAAY,OACZC,YAAa,OACbC,aAAcT,EAAMM,QAAQ,GAC5BI,MAAO,cACPC,QAAS,OACTC,WAAY,WAEdC,MAAO,CACLN,WAAYP,EAAMM,QAAQ,GAC1BE,YAAaR,EAAMM,QAAQ,IAE7BxB,SAAU,CACR0B,YAAaR,EAAMM,QAAQ,IAE7BQ,KAAM,CACJC,UAAW,OACXC,OAAQ,UAEVC,MAAO,CACLZ,QAAS,OACTa,SAAU,IACVP,QAAS,OACTQ,oBAAqB,iBACrBC,QAASpB,EAAMM,QAAQ,IAEzBe,SAAU,CACRH,SAAU,QACVI,UAAW,QACXC,UAAW,SACXC,MAAOxB,EAAMyB,QAAQC,KAAKC,UAC1BC,WAAY,UAEdC,SAAU,CACRC,eAAgB,QAElBC,QAAS,CACPC,OAAQ,SAEVC,UAAW,CACTD,OAAQ,MACRE,cAAe,SACfC,WAAY,OACZC,SAAU,QAEZC,YAAa,CACXL,OAAQ,MACRrB,QAAS,OACT2B,iBAAkB,iBAClBnB,oBAAqB,iBACrBH,OAAQ,QAEVuB,aAAc,CACZH,SAAU,OACVI,gBAAiB,UACjBhB,MAAO,UACPR,OAAQ,OACRX,QAAS,OACToC,aAAc,QAEhBC,aAAc,CACZN,SAAU,OACVI,gBAAiB,UACjBhB,MAAO,UACPR,OAAQ,OACRX,QAAS,OACToC,aAAc,QAEhBE,cAAe,CACbP,SAAU,OACVI,gBAAiB,UACjBhB,MAAO,UACPR,OAAQ,OACRX,QAAS,OACToC,aAAc,QAEhBG,eAAgB,CACdR,SAAU,OACVI,gBAAiB,UACjBhB,MAAO,UACPR,OAAQ,OACRX,QAAS,OACToC,aAAc,aAwBpB,ICpGKI,ED2JUC,EAvD+B,SAAC,GAAwC,IAAtCpE,EAAqC,EAArCA,QAASqE,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,QAChEC,EAAUnD,IAEVoD,EAAiB,SAAC,GAAyC,IAAvC5D,EAAsC,EAAtCA,OACxB,OACE,kBAAC,IAAD,CAAM6D,GAAI,MAAQ7D,EAAO8D,QAASC,UAAWJ,EAAQpB,UACnD,kBAACyB,EAAA,EAAD,CAAMD,UAAWJ,EAAQ5B,UACvB,kBAACkC,EAAA,EAAD,CAAgBF,UAAWJ,EAAQlB,SACjC,yBAAKsB,UAAWJ,EAAQhB,WAAY3C,EAAOkE,eAC3C,yBAAKH,UAAWJ,EAAQZ,aACrB/C,EAAOmE,YAAY,GAAK,GACvB,yBAAKJ,UAAWJ,EAAQV,cAAxB,WACWjD,EAAOmE,YAAY,IAE/BnE,EAAOmE,YAAY,GAAK,GACvB,yBAAKJ,UAAWJ,EAAQP,cAAxB,WACWpD,EAAOmE,YAAY,IAE/BnE,EAAOmE,YAAY,GAAK,GACvB,yBAAKJ,UAAWJ,EAAQN,eAAxB,YACYrD,EAAOmE,YAAY,IAEhCnE,EAAOmE,YAAY,GAAK,GACvB,yBAAKJ,UAAWJ,EAAQL,gBAAxB,aACatD,EAAOmE,YAAY,SAS9C,OACE,6BACE,kBAACC,EAAA,EAAD,CAAOL,UAAWJ,EAAQ/C,QACxB,0BAAMmD,UAAWJ,EAAQpC,OAAzB,eACA,kBAAC8C,EAAA,EAAD,CAAS9C,MAAM,6CACb,0BAAMwC,UAAWJ,EAAQnE,UAAzB,iBAlDV,SAA4BiE,GAC1B,OAAKA,EAIE,IAAIa,KAAKC,eAAe,QAAS,CACtCC,KAAM,UACNC,MAAO,OACPC,IAAK,YACJC,OAAOlB,GAPD,UAgDmDmB,CAAmBnB,MAI3E,kBAACW,EAAA,EAAD,CAAOL,UAAWJ,EAAQnC,OACtBkC,GACA,yBAAKK,UAAWJ,EAAQhC,MAAOkD,aAAW,gBACvCzF,EAAQa,KAAI,SAACD,GAAD,OACX,kBAAC4D,EAAD,CAAgB5D,OAAQA,QAG7B0D,GAAW,kBAACoB,EAAA,EAAD,CAAkBC,KAAM,Q,4LCrJvCxB,O,qBAAAA,I,qBAAAA,I,uBAAAA,I,yBAAAA,I,4BAAAA,M,KAQL,IAAM/C,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,OAAO,eACFF,EAAMG,WAAWC,OADhB,CAEJC,QAASL,EAAMM,QAAQ,GACvBC,WAAY,OACZC,YAAa,OACbC,aAAcT,EAAMM,QAAQ,GAC5BI,MAAO,cACPC,QAAS,OACTC,WAAY,WAEdC,MAAO,CACLN,WAAYP,EAAMM,QAAQ,GAC1BE,YAAaR,EAAMM,QAAQ,GAC3B8B,SAAU,QAEZkC,WAAY,CACVtD,OAAQ,GAEVuD,SAAU,CACRhE,WAAY,QAEdiE,UAAW,CACTxD,OAAQ,OACRyD,SAAU,QAEZ3D,KAAM,CACJC,UAAW,OACXC,OAAQ,UAEVC,MAAO,CACLC,SAAU,UAWhB,SAASwD,EAAkBC,GAA2B,IAC5CC,EAA0BD,EAA1BC,QAASC,EAAiBF,EAAjBE,KAAMjF,EAAW+E,EAAX/E,OAD4B,EAEzBkF,mBAAiBlF,GAASA,EAAOmF,MAAY,GAFpB,mBAE5CC,EAF4C,KAErCC,EAFqC,KAI7CC,EAAc,WAClBN,EAAQI,IAGVG,qBAAU,WACJN,GACFI,EAASrF,GAASA,EAAOmF,MAAY,KAEtC,CAACF,EAAMjF,IAMV,OACE,kBAACwF,EAAA,EAAD,CACEP,KAAMA,EACND,QAASM,EACTG,kBAAgB,sBAChBC,mBAAiB,6BAEjB,kBAACC,EAAA,EAAD,CAAaC,GAAG,uBAAuB,gCACvC,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEF,GAAG,WACHG,MAAM,aACNjI,KAAK,SACLkI,QAAQ,WAERC,gBAAiB,CACfC,QAAQ,GAEV9E,OAAO,SACPgE,MAAOA,EACPe,SAxBa,SAACC,GACpBf,EAASgB,SAASD,EAAEE,OAAOlB,YA0BzB,kBAACmB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,QAASnB,EAAa1D,MAAM,WAApC,aAqGR,SAAS8E,EAAT,GAaE,IAbwE,IAA9CC,EAA6C,EAA7CA,WACpBtD,EAAUnD,IAEV0G,EAAWD,EAAWE,QAAO,SAACC,EAAK9G,GACvC,IAAM+G,EAAU/G,EAAOgH,aAAahH,EAAOgH,aAAaC,OAAS,GAAGF,QACpE,OAAIA,EAAUD,EACLC,EAEAD,IAER,GAEGI,EAAU,GACPC,EAAI,EAAGA,GAAKP,EAAUO,IAC7BD,EAAQE,KAAK,kBAACC,EAAA,EAAD,CAAWC,IAAKH,EAAGI,MAAM,SAAzB,QAAuCJ,IAGtD,OACE,kBAACrD,EAAA,EAAD,CAAOL,UAAWJ,EAAQnC,MACxB,kBAACsG,EAAA,EAAD,CAAO/D,UAAWJ,EAAQhC,MAAOkD,aAAW,sBAC1C,kBAACkD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACL,EAAA,EAAD,oBACA,kBAACA,EAAA,EAAD,eACCH,IAGL,kBAACS,EAAA,EAAD,KACGhB,EAAWhH,KAAI,SAACK,GAAD,OACd,kBAAC0H,EAAA,EAAD,CAAUJ,IAAKtH,EAAO4H,UACpB,kBAACP,EAAA,EAAD,CAAWQ,UAAU,KAAKC,MAAM,OAC7B9H,EAAOiB,MAAM8G,KACI,IAAjB/H,EAAOmF,MAAe,kBAAC6C,EAAA,EAAD,CAAYvE,UAAWJ,EAAQsB,SAAUsD,KAAI,mCAA8BjI,EAAOmF,MAAQmB,OAAO,UACtH,kBAAC,IAAD,CAAiB9D,SAAS,YAG9B,kBAAC6E,EAAA,EAAD,KAAYpE,EAAajD,EAAOkI,eAC/BlI,EAAOgH,aAAarH,KAAI,SAACwI,GAAD,OACvB,kBAACd,EAAA,EAAD,CAAWE,MAAM,SACfY,EAAOC,IAAMD,EAAOC,IAAM,CACxB,KAAMD,EAAOE,WAAY,IACzBF,EAAOG,SAAU,IAAKH,EAAOI,cAC5BC,KAAK,gBAU1B,SAASC,GAAT,GAAoI,IAAzG9B,EAAwG,EAAxGA,WAAY+B,EAA4F,EAA5FA,aAC/BrF,EAAUnD,IAEVyI,EAAe,SAAC,GAAqE,IAAnElC,EAAkE,EAAlEA,QAASzG,EAAyD,EAAzDA,OAK/B,OAAQ,kBAACwG,EAAA,EAAD,CAAQC,QAJI,WAClBA,EAAQzG,KAGF,SAGV,OACE,kBAAC8D,EAAA,EAAD,CAAOL,UAAWJ,EAAQnC,MACxB,kBAACsG,EAAA,EAAD,CAAO/D,UAAWJ,EAAQhC,MAAOkD,aAAW,qBAC1C,kBAACkD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACL,EAAA,EAAD,6BACA,kBAACA,EAAA,EAAD,iCACA,kBAACA,EAAA,EAAD,CAAWE,MAAM,SAAjB,iBACA,kBAACF,EAAA,EAAD,CAAWE,MAAM,SAAjB,aACA,kBAACF,EAAA,EAAD,CAAWE,MAAM,SAAjB,QACA,kBAACF,EAAA,EAAD,CAAWE,MAAM,SAAjB,cAGJ,kBAACI,EAAA,EAAD,KACGhB,EAAWhH,KAAI,SAACK,GAAD,OACd,kBAAC0H,EAAA,EAAD,CAAUJ,IAAKtH,EAAO4H,UACpB,kBAACP,EAAA,EAAD,CAAWQ,UAAU,KAAKC,MAAM,OAC7B9H,EAAOiB,MAAM8G,KAEhB,kBAACV,EAAA,EAAD,KAAYrH,EAAOiB,MAAM2H,SACzB,kBAACvB,EAAA,EAAD,CAAWE,MAAM,SAASvH,EAAOmF,MACjC,kBAACkC,EAAA,EAAD,CAAWE,MAAM,SAASvH,EAAO6I,OACjC,kBAACxB,EAAA,EAAD,CAAWE,MAAM,SAASvH,EAAOlC,MACjC,kBAACuJ,EAAA,EAAD,CAAWE,MAAM,SAASvH,EAAO8I,UACjC,kBAACzB,EAAA,EAAD,KACE,kBAACsB,EAAD,CAAclC,QAASiC,EAAc1I,OAAQA,YAU9C+I,OAtLmC,SAAC,GAA8F,IAA5FC,EAA2F,EAA3FA,SAAUC,EAAiF,EAAjFA,WAAYvJ,EAAqE,EAArEA,OAAqE,IAA7DiH,kBAA6D,MAAhD,GAAgD,EAA5CuC,EAA4C,EAA5CA,mBAAoBC,EAAwB,EAAxBA,kBAC9GC,EAAaC,cAAbD,SADsI,EAExGlE,oBAAS,GAF+F,mBAEvIoE,EAFuI,KAEzHC,EAFyH,OAGlGrE,mBAA6B,MAHqE,mBAGvIsE,EAHuI,KAGvHC,EAHuH,OAI5GvE,oBAAkB,GAJ0F,mBAIvIwE,EAJuI,KAI5HC,EAJ4H,KAKxItG,EAAUnD,IAoBhB,GAhBAqF,qBAAU,YACa,uCAAG,4BAAAqE,EAAA,sEAEpBZ,EAAS/K,EAAWG,oBAFA,SAGDyL,IAAMC,IAA0Bb,EAAa,uBAAyBG,GAHrE,OAGdW,EAHc,OAKpBf,EAAS/K,EAAWI,mBAAmB,CAAEiB,KAAMyK,EAAK9J,KAAKD,UALrC,gDAOpBgK,QAAQC,IAAR,MAPoB,yDAAH,qDAYrBC,KACC,CAAClB,EAAUC,EAAYG,KAErB1J,EACH,OAAO,KAgBT,OACE,6BACE,kBAACoE,EAAA,EAAD,CAAOL,UAAWJ,EAAQ/C,QACxB,0BAAMmD,UAAWJ,EAAQpC,OAAQvB,EAAOkE,eACxC,kBAAC,IAAD,CAAyBuG,MAAOC,KAC9B,kBAAC,IAAD,CACE3G,UAAWJ,EAAQqB,WACnBqB,MAAM,aACNsE,gBAAc,EACdC,aAAa,WACbtE,QAAQ,SACR3B,OAAO,aACPkG,QAAQ,EACRnF,MAAO1F,EAAOG,UACdsG,SAAU,SAACqE,GAAWtB,EAAmBsB,EAAM9K,IAC/C+K,oBAAqB,CACnB,aAAc,eAEhBrJ,OAAO,WAGW,OAArB1B,EAAOG,WAAsB,kBAACkE,EAAA,EAAD,CAAS9C,MAAM,sBAC3C,kBAAC,IAAD,CAAMwC,UAAU,mCAAhB,YAEF,kBAACiH,EAAA,EAAD,CACEtF,MAAM,QACNuF,SAAUjB,EACVvD,SAAU,WACRwD,GAAcD,KAJlB,UAUDA,GAAa,kBAACjB,GAAD,CAAiB9B,WAAYA,EAAY+B,aA/ChC,SAAC1I,GAC1ByJ,EAAkBzJ,GAClBuJ,GAAc,OA8CVG,GAAa,kBAAChD,EAAD,CAAkBC,WAAYA,IAE7C,kBAAC7B,EAAD,CAAmBG,KAAMqE,EAActE,QA7CP,SAAC4F,GACnCrB,GAAc,GACVC,GAAkBA,EAAerE,OAASyF,GAC5CzB,EAAkBK,EAAgB9J,EAAO8D,QAASoH,GAEpDnB,EAAkB,OAwC6DzJ,OAAQwJ,M,qECxMrFtJ,GAAYC,aAAW,SAACC,GAC5B,OAAOC,YAAa,CAClBwK,KAAM,CACJjK,YAAaR,EAAMM,QAAQ,IAE7BO,MAAO,CACLL,YAAaR,EAAMM,QAAQ,IAE7BoK,UAAW,CACTlK,YAAaR,EAAMM,QAAQ,IAE7BqK,KAAM,CACJC,SAAU,QAqCDC,GAhCa,WAC1B,IAAM5H,EAAUnD,KAEhB,OACE,6BACE,kBAACgL,GAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,GAAA,EAAD,KACE,kBAACpD,EAAA,EAAD,CAAYqD,KAAK,QAAQ5H,UAAWJ,EAAQwH,KAAMjJ,MAAM,UAAU2C,aAAW,QAC3E,kBAAC,IAAD,CAAMhB,GAAI,KACR,yBAAK+H,IAAKT,KAAMpH,UAAU,WAAW8H,IAAI,WAG7C,kBAACC,GAAA,EAAD,CAAYxF,QAAQ,KAAKvC,UAAWJ,EAAQpC,OAA5C,0BAGA,kBAACwK,GAAA,EAAD,CAAUC,eAAa,EAAC7D,UAAW8D,IAASpI,GAAI,UAAWqI,gBAAiB,cAC1E,kBAACpF,EAAA,EAAD,CAAQR,QAAQ,YAAYvC,UAAWJ,EAAQyH,WAA/C,YAEF,kBAACW,GAAA,EAAD,CAAUC,eAAa,EAAC7D,UAAW8D,IAASpI,GAAI,WAAYqI,gBAAiB,cAC3E,kBAACpF,EAAA,EAAD,CAAQR,QAAQ,YAAYvC,UAAWJ,EAAQyH,WAA/C,YAEF,kBAACW,GAAA,EAAD,CAAUC,eAAa,EAAC7D,UAAW8D,IAASpI,GAAI,SAAUqI,gBAAiB,cACzE,kBAACpF,EAAA,EAAD,CAAQR,QAAQ,YAAYvC,UAAWJ,EAAQyH,UAAWe,UAAU,GAApE,UAEF,yBAAKpI,UAAWJ,EAAQ0H,OACxB,kBAACvE,EAAA,EAAD,CAAQ5E,MAAM,WAAd,a,2GCtCJkK,GAAc,CAClBC,QAASC,KACTC,MAAOC,MAGHhM,GAAYC,aAAW,SAACC,GAAD,MAAmB,CAC9C2L,QAAS,CACPnJ,gBAAiBuJ,KAAM,MAEzBF,MAAO,CACLrJ,gBAAiBxC,EAAMyB,QAAQoK,MAAMG,MAEvCC,KAAM,CACJ7J,SAAU,IAEZ8J,YAAa,CACXC,QAAS,GACT3L,YAAaR,EAAMM,QAAQ,IAE7B8L,QAAS,CACPzL,QAAS,OACTC,WAAY,cAWhB,SAASyL,GAAyB1H,GAChC,IAAM1B,EAAUnD,GAAU,IAClBuD,EAAmDsB,EAAnDtB,UAAW+I,EAAwCzH,EAAxCyH,QAASxH,EAA+BD,EAA/BC,QAASgB,EAAsBjB,EAAtBiB,QAAY0G,EAFH,aAEa3H,EAFb,6CAGxC4H,EAAOb,GAAY9F,GAEzB,OACE,kBAAC4G,GAAA,EAAD,eACEnJ,UAAWoJ,aAAKxJ,EAAQ2C,GAAUvC,GAClCiC,mBAAiB,kBACjB8G,QACE,0BAAM5G,GAAG,kBAAkBnC,UAAWJ,EAAQmJ,SAC5C,kBAACG,EAAD,CAAMlJ,UAAWoJ,aAAKxJ,EAAQgJ,KAAMhJ,EAAQiJ,eAC3CE,GAGLnN,OAAQ,CACN,kBAAC2I,EAAA,EAAD,CAAYV,IAAI,QAAQ/C,aAAW,QAAQ3C,MAAM,UAAU6E,QAASzB,GAClE,kBAAC,KAAD,CAAWvB,UAAWJ,EAAQgJ,UAG9BK,IAKH,SAASI,GAAT,GAA2G,IAAlF7H,EAAiF,EAAjFA,KAAMmD,EAA2E,EAA3EA,IAAK9C,EAAsE,EAAtEA,YAEzC,SAASN,EAAQoB,EAAoB2G,GACpB,cAAXA,GAIJzH,GAAY,GAGd,OACE,kBAAC0H,GAAA,EAAD,CACEC,aAAc,CACZC,SAAU,SACVC,WAAY,QAEdlI,KAAMA,EACNmI,iBAAkB,IAClBpI,QAASA,GAET,kBAACyH,GAAD,CACEzH,QAASA,EACTgB,QAAQ,QACRwG,QAASpE,KAMV,SAASiF,GAAT,GAA6G,IAAlFpI,EAAiF,EAAjFA,KAAMmD,EAA2E,EAA3EA,IAAK9C,EAAsE,EAAtEA,YAE3C,SAASN,EAAQoB,EAAoB2G,GACpB,cAAXA,GAIJzH,GAAY,GAGd,OACE,kBAAC0H,GAAA,EAAD,CACEC,aAAc,CACZC,SAAU,SACVC,WAAY,QAEdlI,KAAMA,EACNmI,iBAAkB,IAClBpI,QAASA,GAET,kBAACyH,GAAD,CACEzH,QAASA,EACTgB,QAAQ,UACRwG,QAASpE,K,WC5GXlI,GAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,OAAO,eACFF,EAAMG,WAAWC,OADhB,CAEJC,QAASL,EAAMM,QAAQ,GACvBC,WAAY,OACZC,YAAa,OACbC,aAAcT,EAAMM,QAAQ,GAC5BI,MAAO,gBAETwM,cAAe,CACb3M,WAAYP,EAAMM,QAAQ,GAC1BE,YAAaR,EAAMM,QAAQ,IAE7BkE,UAAW,CACTxD,OAAQ,OACRyD,SAAU,QAEZxD,MAAO,CACLC,SAAU,UAwDDiM,GA9CuB,SAAC,GAAiC,IAG5CC,EAHajO,EAA8B,EAA9BA,OAA8B,IAAtB6D,eAAsB,SAC/DC,EAAUnD,KAchB,OACE,6BACE,kBAAC4D,EAAA,EAAD,CAAOL,UAAWJ,EAAQ/C,QACxB,0BAAMmD,UAAWJ,EAAQiK,eAAzB,OAAyC/N,QAAzC,IAAyCA,OAAzC,EAAyCA,EAAQkO,YACjD,0BAAMhK,UAAWJ,EAAQiK,eAAzB,eAA8C/N,QAA9C,IAA8CA,OAA9C,EAA8CA,EAAQmO,MACtD,0BAAMjK,UAAWJ,EAAQiK,eAAzB,kBAjBoBE,EAiBmD,OAACjO,QAAD,IAACA,OAAD,EAACA,EAAQoO,iBAZ7E,IAAI3J,KAAKC,eAAe,QAAS,CACtCC,KAAM,UACNC,MAAO,UACPC,IAAK,YACJC,OAAO,IAAIuJ,KAAKJ,IAPV,YAiBP,kBAAC1J,EAAA,EAAD,CAAOL,UAAWJ,EAAQuB,WACxB,kBAAC4C,EAAA,EAAD,CAAO/D,UAAWJ,EAAQhC,MAAOkD,aAAW,gBAC1C,kBAACkD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACL,EAAA,EAAD,+BACA,kBAACA,EAAA,EAAD,CAAWE,MAAM,SAAjB,cAGFnE,GAAW7D,GACX,kBAACoI,EAAA,EAAD,KACGpI,EAAOS,OAAOL,KAAI,SAACK,GAAD,OACjB,kBAAC0H,EAAA,EAAD,CAAUJ,IAAKtH,EAAOiB,MAAM8G,KAC1B,kBAACV,EAAA,EAAD,CAAWQ,UAAU,KAAKC,MAAM,OAAO9H,EAAOiB,MAAM8G,KACpD,kBAACV,EAAA,EAAD,CAAWE,MAAM,SAASvH,EAAO6N,eAK1CzK,GAAW,kBAACoB,EAAA,EAAD,CAAkBC,KAAM,QCiE7BqJ,GA3HiB,SAAC,GAAoB,IAAlB7E,EAAiB,EAAjBA,WAAiB,EACxB8E,qBAAW5O,EAAST,GADI,mBAC3CU,EAD2C,KACpC4J,EADoC,OAEZ9D,oBAAS,GAFG,mBAE3C8I,EAF2C,KAE9BC,EAF8B,OAGd/I,mBAAS,IAHK,mBAG3CgJ,EAH2C,KAG/BC,EAH+B,OAIhBjJ,oBAAS,GAJO,mBAI3CkJ,EAJ2C,KAIhCC,EAJgC,OAKlBnJ,mBAAS,IALS,mBAK3CoJ,EAL2C,KAKjCC,EALiC,KASlDhJ,qBAAU,YACa,uCAAG,gCAAAqE,EAAA,sEAEpBZ,EAAS/K,EAAWC,qBAFA,SAGD2L,IAAMC,IAA2Bb,EAAa,kBAH7C,OAGdc,EAHc,OAKdyE,EAAazE,EAAK9J,KAAKuO,WACvBtP,EAAWsP,EAAa,IAAIZ,KAAKY,QAAc5P,EACrDoK,EAAS/K,EAAWE,oBAAoB,CAAEmB,KAAMyK,EAAK9J,KAAKnB,QAASI,cAP/C,kDASpB8K,QAAQC,IAAR,MAToB,0DAAH,qDAcrBwE,KACC,CAACxF,IAEJ1D,qBAAU,YACa,uCAAG,8BAAAqE,EAAA,sEAEpBZ,EAAS/K,EAAWK,oBAFA,SAGDuL,IAAMC,IAA8Bb,EAAa,qBAHhD,OAGdc,EAHc,QAKZ2E,EAAY3E,EAAK9J,KAAjByO,UACOA,EAAQzH,OAAS,GAC9B+B,EAAS/K,EAAWM,mBAAmB,CAAEgB,OAAQmP,EAAQ,MAPvC,gDAUpB1E,QAAQC,IAAR,MAVoB,yDAAH,qDAerB0E,KACC,CAAC1F,IAEJ,IAAM2F,EAAsB,uCAAG,WAAOC,EAAsBnP,GAA7B,eAAAkK,EAAA,6DACvB/L,EAAqC,CACzC2F,QAAS9D,EAAO8D,QAChB3D,UAAWgP,EAAUA,EAAQ/O,UAAY,MAHd,SAKV+J,IAAMiF,KAAK7F,EAAa,sBAAuBpL,GALrC,OAMT,MANS,OAMpBkR,QACP/F,EAAS/K,EAAWO,mBAAmB,CACrCkB,OAAQA,EACRG,UAAWgP,KATc,2CAAH,wDActBG,EAAqB,uCAAG,WAAOhP,EAAqBoJ,EAAkBwB,GAA9C,iBAAAhB,EAAA,6DACtB/L,EAA8B,CAClCuL,SAAUA,EACV6F,IAAKjP,EAAO4H,SACZgD,SAAUA,GAJgB,kBAOPf,IAAMiF,KAAK7F,EAAa,eAAgBpL,GAPjC,OAQN,OADdkM,EAPoB,QAQjBgF,SACP/F,EAAS/K,EAAWQ,YAAY,CAC9BuB,OAAQA,EACRC,KAAM8J,EAAK9J,KAAKA,QAElBkO,EAAc,0BAAD,OAA2BnO,EAAOiB,MAAM8G,MACrDkG,GAAe,IAdS,gDAkB1BM,EAAY,sCAAD,OAAuCvO,EAAOiB,MAAM8G,MAC/DsG,GAAa,GAnBa,yDAAH,0DA+B3B,OACE,yBAAK5K,UAAU,OACb,kBAAC,GAAD,MACA,yBAAKA,UAAU,YACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOyL,OAAO,EAAMC,KAAK,KACvB,kBAAC,IAAD,CAAU5L,GAAG,aAEf,kBAAC,IAAD,CAAO2L,OAAO,EAAMC,KAAK,WACvB,kBAAC,GAAD,CAAQ5P,OAAQH,EAAMT,OAAQyE,QAAShE,EAAMP,iBAE/C,kBAAC,IAAD,CAAOqQ,OAAO,EAAMC,KAAK,YACvB,kBAAC,EAAD,CAAYrQ,QAASM,EAAMN,QAASqE,aAAc/D,EAAMF,SAAUkE,QAAShE,EAAML,eAAgBmK,mBAAoB0F,KAEvH,kBAAC,IAAD,CAAOO,KAAK,eAAeC,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,OACjC,kBAAC,GAAD,CACErG,SAAUA,EACVC,WAAYA,EACZvJ,OAAQN,EAAMN,QAAQwQ,MAAK,SAAC5P,GAAD,OAAY6P,OAAO7P,EAAO8D,WAAa6L,EAAMG,OAAOpG,YAC/EzC,WAAYvH,EAAMJ,gBAClBkK,mBAAoB0F,EACpBzF,kBAAmB6F,SAI3B,mBAjCJ,WACE,OACE,yBAAKvL,UAAU,cACb,uBAAGwE,KAAK,kDAAR,aA8BF,MACA,kBAACoF,GAAD,CAAiBpI,KAAM+I,EAAa5F,IAAK8F,EAAY5I,YAAa2I,IAClE,kBAACnB,GAAD,CAAe7H,KAAMmJ,EAAWhG,IAAKkG,EAAUhJ,YAAa+I,MC9HlE,IAAMoB,GAAa,CACjBC,YAAa,gECJKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAST,MACvB,2D,wBCPAU,GAAYC,aAAe,CAC/BnO,QAAS,CACP/D,KAAM,UAIVmS,IAASb,OACP,kBAACc,GAAA,EAAD,CAAe9P,MAAO2P,IACpB,kBAAC,IAAD,KACE,kBAAC,GAAD,CAAK9G,WFjBEwG,GEiBmBC,gBAG9BS,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBE3InBC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.d2b43032.chunk.js","sourcesContent":["// Written by Patrick Desjardins\n// https://patrickdesjardins.com/blog/typescript-with-strong-typed-action-when-using-usereducer-of-react-hooks\n\n/**\n * Create an action that has a strongly typed string literal name with a\n * strongly typed payload\n */\nexport function createActionPayload<TypeAction, TypePayload>(\n    actionType: TypeAction): (payload: TypePayload) =>\n    ActionsWithPayload<TypeAction, TypePayload> {\n  return (p: TypePayload): ActionsWithPayload<TypeAction, TypePayload> => {\n    return {payload: p, type: actionType};\n  };\n}\n\n/**\n * Create an action with no payload\n */\nexport function createAction<TypeAction>(actionType: TypeAction): () =>\n    ActionsWithoutPayload<TypeAction> {\n  return (): ActionsWithoutPayload<TypeAction> => {\n    return {type: actionType};\n  };\n}\n/**\n * Create an action with a payload\n */\nexport interface ActionsWithPayload<TypeAction, TypePayload> {\n  type: TypeAction;\n  payload: TypePayload;\n}\n\n/**\n * Create an action that does not have a payload\n */\nexport interface ActionsWithoutPayload<TypeAction> {\n  type: TypeAction;\n}\n\n/**\n * A very general type that means to be \"an object with a many field created\n * with createActionPayload and createAction\n */\ninterface ActionCreatorsMapObject {\n  [key: string]: (...args: any[]) =>\n      ActionsWithPayload<any, any>| ActionsWithoutPayload<any>;\n}\n\n/**\n * Use this Type to merge several action object that has field created with\n * createActionPayload or createAction E.g. type ReducerWithActionFromTwoObjects\n * = ActionsUnion<typeof ActionsObject1 &amp; typeof ActionsObject2>;\n */\nexport type ActionsUnion<A extends ActionCreatorsMapObject> =\n    ReturnType<A[keyof A]>;\n","import {OnDeckReport, SeasonModel, SeriesModel} from '../../../model/firestore';\nimport {SetSeriesIdResponse} from '../../../model/service';\n\nimport {ActionsUnion, createAction, createActionPayload} from './action_utils';\n\n\nexport const FETCH_SEASONS_START = 'ACTION_FETCH_SEASONS_START'\nexport const FETCH_SEASONS_SUCCESS = 'ACTION_FETCH_SEASONS_SUCCESS';\nexport const FETCH_SERIES_START = 'ACTION_FETCH_SERIES_START'\nexport const FETCH_SERIES_SUCCESS = 'ACTION_FETCH_SERIES_SUCCESS';\nexport const FETCH_ONDECK_START = 'ACTION_FETCH_ONDECK_START'\nexport const FETCH_ONDECK_SUCCESS = 'ACTION_FETCH_ONDECK_SUCCESS';\nexport const SET_SEASON_START_DATE = 'ACTION_SET_SEASON_START_DATE';\nexport const SET_SERIES_ID = 'SET_SERIES_ID';\n\nexport const AppActions = {\n  fetchSeasonsStart:\n      createAction<typeof FETCH_SEASONS_START>(FETCH_SEASONS_START),\n  fetchSeasonsSuccess: createActionPayload<\n      typeof FETCH_SEASONS_SUCCESS,\n      {json: SeasonModel[], lastSync: Date | undefined}>(FETCH_SEASONS_SUCCESS),\n  fetchSeriesStart: createAction<typeof FETCH_SERIES_START>(FETCH_SERIES_START),\n  fetchSeriesSuccess:\n      createActionPayload<typeof FETCH_SERIES_SUCCESS, {json: SeriesModel[]}>(\n          FETCH_SERIES_SUCCESS),\n  fetchOnDeckStart: createAction<typeof FETCH_ONDECK_START>(FETCH_ONDECK_START),\n  fetchOnDeckSuccess:\n      createActionPayload<typeof FETCH_ONDECK_SUCCESS, {report: OnDeckReport}>(\n          FETCH_ONDECK_SUCCESS),\n  setSeasonStartDate: createActionPayload<\n      typeof SET_SEASON_START_DATE,\n      {season: SeasonModel, startDate: Date | null}>(SET_SEASON_START_DATE),\n  setSeriesId: createActionPayload<\n      typeof SET_SERIES_ID,\n      {series: SeriesModel, data: SetSeriesIdResponse['data']}>(SET_SERIES_ID)\n};\n\nexport type AllActions = ActionsUnion<typeof AppActions>;\n","import {OnDeckReport, SeasonModel, SeriesModel} from '../../../model/firestore';\n\nimport {AllActions, FETCH_ONDECK_START, FETCH_ONDECK_SUCCESS, FETCH_SEASONS_START, FETCH_SEASONS_SUCCESS, FETCH_SERIES_START, FETCH_SERIES_SUCCESS, SET_SEASON_START_DATE, SET_SERIES_ID} from './actions';\n\nexport enum Season {\n  UNKNOWN = 0,\n  SPRING,\n  SUMMER,\n  FALL,\n  WINTER,\n}\n\ninterface AppState {\n  ondeck?: OnDeckReport;\n  loadingOnDeck: boolean;\n  seasons: SeasonModel[];\n  loadingSeasons: boolean;\n  seriesForSeason: SeriesModel[];\n  loadingSeries: boolean;\n  lastSync: Date|undefined;\n}\n\nexport const initialState: AppState = {\n  ondeck: undefined,\n  loadingOnDeck: false,\n  seasons: [],\n  loadingSeasons: false,\n  seriesForSeason: [],\n  loadingSeries: false,\n  lastSync: undefined,\n}\n\nexport function reducer(state: AppState = initialState, action: AllActions) {\n  switch (action.type) {\n    case FETCH_SEASONS_START:\n      return {\n        ...state, loadingSeasons: true,\n      }\n    case FETCH_SEASONS_SUCCESS:\n      return {\n        ...state, seasons: action.payload.json,\n            lastSync: action.payload.lastSync, loadingSeasons: false,\n      }\n    case FETCH_SERIES_START:\n      return {\n        ...state, loadingSeries: true,\n      }\n    case FETCH_SERIES_SUCCESS:\n      return {\n        ...state, seriesForSeason: action.payload.json, loadingSeries: false,\n      }\n    case FETCH_ONDECK_START:\n      return {\n        ...state, loadingOnDeck: true,\n      }\n    case FETCH_ONDECK_SUCCESS:\n      return {\n        ...state, ondeck: action.payload.report, loadingOnDeck: false,\n      }\n    case SET_SEASON_START_DATE:\n      const seasonIdx = state.seasons.indexOf(action.payload.season);\n      return {\n        ...state, seasons: state.seasons.map((season, idx) => {\n          if (idx !== seasonIdx) {\n            // This isn't the item we care about - keep it as-is\n            return season\n          }\n\n          // Otherwise, this is the one we want - return an updated value\n          const startDate = action.payload.startDate;\n          return {\n            ...season, startDate: startDate ? startDate.getTime() : null,\n          }\n        })\n      }\n    case SET_SERIES_ID:\n      const seriesIdx = state.seriesForSeason.indexOf(action.payload.series);\n      return {\n        ...state, seriesForSeason: state.seriesForSeason.map((series, idx) => {\n          if (idx !== seriesIdx) {\n            // This isn't the item we care about - keep it as-is\n            return series\n          }\n\n          // Otherwise, this is the one we want - return an updated value\n          return {\n            ...series, ...action.payload.data,\n          }\n        })\n      }\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport './SeasonList.css';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport { Paper, CircularProgress, Tooltip, Card } from '@material-ui/core';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport { Link } from 'react-router-dom';\nimport { SeasonModel } from '../../../model/firestore';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    header: {\n      ...theme.typography.button,\n      padding: theme.spacing(1),\n      marginLeft: 'auto',\n      marginRight: 'auto',\n      marginBottom: theme.spacing(2),\n      width: 'fit-content',\n      display: 'flex',\n      alignItems: 'center',\n    },\n    title: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(2),\n    },\n    lastSync: {\n      marginRight: theme.spacing(3),\n    },\n    root: {\n      overflowX: 'auto',\n      margin: '0 10px',\n    },\n    table: {\n      padding: '15px',\n      minWidth: 650,\n      display: 'grid',\n      gridTemplateColumns: 'repeat(4, 1fr)',\n      gridGap: theme.spacing(3),\n    },\n    gridCell: {\n      minWidth: '150px',\n      minHeight: '150px',\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n      whiteSpace: 'nowrap',\n    },\n    cellLink: {\n      textDecoration: 'none',\n    },\n    cellBtn: {\n      height: '150px',\n    },\n    cellTitle: {\n      height: '40%',\n      verticalAlign: 'middle',\n      lineHeight: '70px',\n      fontSize: '30px',\n    },\n    cellDetails: {\n      height: '50%',\n      display: 'grid',\n      gridTemplateRows: 'repeat(2, 1fr)',\n      gridTemplateColumns: 'repeat(2, 1fr)',\n      margin: '10px',\n    },\n    unknownLabel: {\n      fontSize: '15px',\n      backgroundColor: '#525252',\n      color: '#e29e00',\n      margin: 'auto',\n      padding: '10px',\n      borderRadius: '40px',\n    },\n    droppedLabel: {\n      fontSize: '15px',\n      backgroundColor: '#525252',\n      color: '#e83f22',\n      margin: 'auto',\n      padding: '10px',\n      borderRadius: '40px',\n    },\n    watchingLabel: {\n      fontSize: '15px',\n      backgroundColor: '#525252',\n      color: '#42af42',\n      margin: 'auto',\n      padding: '10px',\n      borderRadius: '40px',\n    },\n    completedLabel: {\n      fontSize: '15px',\n      backgroundColor: '#525252',\n      color: '#4e92f9',\n      margin: 'auto',\n      padding: '10px',\n      borderRadius: '40px',\n    },\n  }),\n);\n\ninterface SeasonListProps {\n  seasons: SeasonModel[];\n  lastSyncDate: Date | undefined;\n  loading: boolean;\n  onStartDateChanged: (date: Date | null, season: SeasonModel, index: number) => void;\n}\n\nfunction formatLastSyncDate(lastSyncDate: Date | undefined) {\n  if (!lastSyncDate) {\n    return 'Unknown';\n  }\n\n  return new Intl.DateTimeFormat('en-US', {\n    year: 'numeric',\n    month: 'long',\n    day: '2-digit'\n  }).format(lastSyncDate);\n}\n\nconst SeasonList: React.FC<SeasonListProps> = ({ seasons, lastSyncDate, loading }) => {\n  const classes = useStyles();\n\n  const SeasonGridCard = ({ season }: { season: SeasonModel }) => {\n    return (\n      <Link to={'/s/' + season.sheetId} className={classes.cellLink}>\n        <Card className={classes.gridCell}>\n          <CardActionArea className={classes.cellBtn}>\n            <div className={classes.cellTitle}>{season.formattedName}</div>\n            <div className={classes.cellDetails}>\n              {season.seriesStats[0] > 0 &&\n                <div className={classes.unknownLabel}>\n                  Unknown {season.seriesStats[0]}\n                </div>}\n              {season.seriesStats[1] > 0 &&\n                <div className={classes.droppedLabel}>\n                  Dropped {season.seriesStats[1]}\n                </div>}\n              {season.seriesStats[2] > 0 &&\n                <div className={classes.watchingLabel}>\n                  Watching {season.seriesStats[2]}\n                </div>}\n              {season.seriesStats[3] > 0 &&\n                <div className={classes.completedLabel}>\n                  Completed {season.seriesStats[3]}\n                </div>}\n            </div>\n          </CardActionArea>\n        </Card>\n      </Link>\n    );\n  }\n\n  return (\n    <div>\n      <Paper className={classes.header}>\n        <span className={classes.title}>All Seasons</span>\n        <Tooltip title=\"Last time data was read from GoogleSheets\">\n          <span className={classes.lastSync}>Last Sync:&nbsp;{formatLastSyncDate(lastSyncDate)}</span>\n        </Tooltip>\n      </Paper>\n      {/* TODO Add an empty state message and a loading spinner */}\n      <Paper className={classes.root}>\n        {!loading &&\n          <div className={classes.table} aria-label=\"seasons grid\">\n            {seasons.map((season) => (\n              <SeasonGridCard season={season}></SeasonGridCard>\n            ))}\n          </div>}\n        {loading && <CircularProgress size={60} />}\n      </Paper>\n    </div>\n  );\n}\n\nexport default SeasonList;\n","import React, { useEffect, useState, ChangeEvent } from 'react';\nimport './SeasonDetail.css';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { Tooltip, Icon, Paper, Table, TableHead, TableRow, TableCell, TableBody, Dialog, DialogTitle, Button, DialogActions, DialogContent, TextField } from '@material-ui/core';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport IconButton from '@material-ui/core/IconButton';\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\nimport { SeasonModel, SeriesModel } from '../../../model/firestore';\nimport { AppActions } from '../state/actions';\nimport { GetAllSeriesResponse } from '../../../model/service';\n\n// TODO: This is copied from model/firestore due to Webpack not being able to transplie files across\n// symlinks. We should find a way to share this file between the projects/\n// Current voting status of a show\nenum VotingStatus {\n  Unknown = 0,\n  Dropped,\n  Watching,\n  Completed,\n  Continuing,\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    header: {\n      ...theme.typography.button,\n      padding: theme.spacing(1),\n      marginLeft: 'auto',\n      marginRight: 'auto',\n      marginBottom: theme.spacing(2),\n      width: 'fit-content',\n      display: 'flex',\n      alignItems: 'center',\n    },\n    title: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(2),\n      fontSize: '20px',\n    },\n    datePicker: {\n      margin: 0,\n    },\n    pushLeft: {\n      marginLeft: '10px',\n    },\n    paperBody: {\n      margin: 'auto',\n      maxWidth: '60vw',\n    },\n    root: {\n      overflowX: 'auto',\n      margin: '0 10px',\n    },\n    table: {\n      minWidth: 650,\n    },\n  }),\n);\n\nexport interface SetSeriesIdDialog {\n  open: boolean;\n  series: SeriesModel | null;\n  onClose: (value: number) => void;\n}\n\nfunction SetSeriesIdDialog(props: SetSeriesIdDialog) {\n  const { onClose, open, series } = props;\n  const [value, setValue] = useState<number>(series ? series.idAL || 0 : 0);\n\n  const handleClose = () => {\n    onClose(value);\n  };\n\n  useEffect(() => {\n    if (open) {\n      setValue(series ? series.idAL || 0 : 0);\n    }\n  }, [open, series]);\n\n  const valueChanged = (e: ChangeEvent<HTMLInputElement>) => {\n    setValue(parseInt(e.target.value));\n  }\n\n  return (\n    <Dialog\n      open={open}\n      onClose={handleClose}\n      aria-labelledby=\"set-id-dialog-title\"\n      aria-describedby=\"set-id-dialog-description\"\n    >\n      <DialogTitle id=\"set-id-dialog-title\">{\"Set AniList.co Id for Series\"}</DialogTitle>\n      <DialogContent>\n        <TextField\n          id=\"id-input\"\n          label=\"AniList Id\"\n          type=\"number\"\n          variant=\"outlined\"\n          // className={classes.textField}\n          InputLabelProps={{\n            shrink: true,\n          }}\n          margin=\"normal\"\n          value={value}\n          onChange={valueChanged}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose} color=\"primary\">\n          Confirm\n          </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\ninterface SeasonDetailProps {\n  dispatch: Function;\n  backendURI: string;\n  season: SeasonModel | undefined;\n  seriesList: SeriesModel[];\n  onStartDateChanged: (newDate: Date | null, season: SeasonModel) => void;\n  onSeriesIdChanged: (series: SeriesModel, seasonId: number, seriesId: number) => void;\n}\n\nconst SeasonDetail: React.FC<SeasonDetailProps> = ({ dispatch, backendURI, season, seriesList = [], onStartDateChanged, onSeriesIdChanged }) => {\n  const { seasonId } = useParams();\n  const [idDialogOpen, setDialogOpen] = useState(false);\n  const [selectedSeries, setSelectedSeries] = useState<SeriesModel | null>(null);\n  const [showDebug, setShowDebug] = useState<boolean>(false);\n  const classes = useStyles();\n\n  // Load all season data on start using effect Hook\n  // https://www.robinwieruch.de/react-hooks-fetch-data\n  useEffect(() => {\n    const fetchSeriesData = async () => {\n      try {\n        dispatch(AppActions.fetchSeriesStart());\n        const resp = await axios.get<GetAllSeriesResponse>(backendURI + '/getSeries?seasonId=' + seasonId);\n\n        dispatch(AppActions.fetchSeriesSuccess({ json: resp.data.series }));\n      } catch (e) {\n        console.log(e);\n        // this.setState({...this.state, isFetching: false});\n      }\n    }\n\n    fetchSeriesData();\n  }, [dispatch, backendURI, seasonId])\n\n  if (!season) {\n    return null;\n  }\n\n  const openSeriesIdDialog = (series: SeriesModel) => {\n    setSelectedSeries(series);\n    setDialogOpen(true);\n  }\n\n  const handleSeriesIdDialogConfirm = (seriesId: number) => {\n    setDialogOpen(false);\n    if (selectedSeries && selectedSeries.idAL !== seriesId) {\n      onSeriesIdChanged(selectedSeries, season.sheetId, seriesId);\n    }\n    setSelectedSeries(null);\n  }\n\n  return (\n    <div>\n      <Paper className={classes.header}>\n        <span className={classes.title}>{season.formattedName}</span>\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n          <KeyboardDatePicker\n            className={classes.datePicker}\n            label=\"Start Date\"\n            disableToolbar\n            inputVariant=\"outlined\"\n            variant=\"inline\"\n            format=\"MM/dd/yyyy\"\n            autoOk={true}\n            value={season.startDate}\n            onChange={(date) => { onStartDateChanged(date, season); }}\n            KeyboardButtonProps={{\n              'aria-label': 'change date',\n            }}\n            margin=\"dense\"\n          />\n        </MuiPickersUtilsProvider>\n        {season.startDate === null && <Tooltip title=\"Missing Start Date\">\n          <Icon className=\"push-left warning-icon text-top\">warning</Icon>\n        </Tooltip>}\n        <ToggleButton\n          value=\"debug\"\n          selected={showDebug}\n          onChange={() => {\n            setShowDebug(!showDebug);\n          }}>\n          {/* <BugReportIcon /> */}\n          Debug\n        </ToggleButton>\n      </Paper>\n      {showDebug && <SeriesDebugGrid seriesList={seriesList} openIDDialog={openSeriesIdDialog}></SeriesDebugGrid>}\n      {!showDebug && <SeriesVotingGrid seriesList={seriesList}></SeriesVotingGrid>}\n\n      <SetSeriesIdDialog open={idDialogOpen} onClose={handleSeriesIdDialogConfirm} series={selectedSeries}></SetSeriesIdDialog>\n    </div>\n  );\n}\n\nfunction SeriesVotingGrid({ seriesList }: { seriesList: SeriesModel[] }) {\n  const classes = useStyles();\n\n  const maxWeeks = seriesList.reduce((max, series) => {\n    const weekNum = series.votingRecord[series.votingRecord.length - 1].weekNum;\n    if (weekNum > max) {\n      return weekNum;\n    } else {\n      return max;\n    }\n  }, 0);\n\n  const headers = [];\n  for (let i = 1; i <= maxWeeks; i++) {\n    headers.push(<TableCell key={i} align=\"right\">Week {i}</TableCell>)\n  }\n\n  return (\n    <Paper className={classes.root}>\n      <Table className={classes.table} aria-label=\"series voting grid\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Series Name</TableCell>\n            <TableCell>Status</TableCell>\n            {headers}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {seriesList.map((series) => (\n            <TableRow key={series.rowIndex}>\n              <TableCell component=\"th\" scope=\"row\">\n                {series.title.raw}\n                {series.idAL !== -1 && <IconButton className={classes.pushLeft} href={`https://anilist.co/anime/${series.idAL}`} target=\"_blank\">\n                  <HelpOutlineIcon fontSize=\"small\" />\n                </IconButton>}\n              </TableCell>\n              <TableCell>{VotingStatus[series.votingStatus]}</TableCell>\n              {series.votingRecord.map((record) => (\n                <TableCell align=\"right\">{\n                  record.msg ? record.msg : [\n                    'Ep', record.episodeNum, ':',\n                    record.votesFor, '-', record.votesAgainst]\n                    .join(' ')}</TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </Paper>\n  );\n}\n\nfunction SeriesDebugGrid({ seriesList, openIDDialog }: { seriesList: SeriesModel[], openIDDialog: (series: SeriesModel) => void }) {\n  const classes = useStyles();\n\n  const DialogButton = ({ onClick, series }: { onClick: Function, series: SeriesModel }) => {\n    const handleClick = () => {\n      onClick(series);\n    };\n\n    return (<Button onClick={handleClick}>Edit</Button>);\n  }\n\n  return (\n    <Paper className={classes.root}>\n      <Table className={classes.table} aria-label=\"series debug grid\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Series Name&nbsp;(Raw)</TableCell>\n            <TableCell>Series Name&nbsp;(AniList)</TableCell>\n            <TableCell align=\"right\">AniList&nbsp;ID</TableCell>\n            <TableCell align=\"right\">MAL&nbsp;ID</TableCell>\n            <TableCell align=\"right\">Type</TableCell>\n            <TableCell align=\"right\">Episodes</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {seriesList.map((series) => (\n            <TableRow key={series.rowIndex}>\n              <TableCell component=\"th\" scope=\"row\">\n                {series.title.raw}\n              </TableCell>\n              <TableCell>{series.title.english}</TableCell>\n              <TableCell align=\"right\">{series.idAL}</TableCell>\n              <TableCell align=\"right\">{series.idMal}</TableCell>\n              <TableCell align=\"right\">{series.type}</TableCell>\n              <TableCell align=\"right\">{series.episodes}</TableCell>\n              <TableCell>\n                <DialogButton onClick={openIDDialog} series={series} />\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </Paper>\n  );\n}\n\nexport default SeasonDetail;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './AppHeader.css';\nimport { Link, NavLink } from 'react-router-dom';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport { AppBar, Toolbar, IconButton, Typography, Button, MenuItem } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) => {\n  return createStyles({\n    logo: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      marginRight: theme.spacing(3),\n    },\n    navButton: {\n      marginRight: theme.spacing(1),\n    },\n    grow: {\n      flexGrow: 1,\n    },\n  });\n});\n\nconst AppHeader: React.FC = () => {\n  const classes = useStyles();\n\n  return (\n    <div>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.logo} color=\"inherit\" aria-label=\"logo\">\n            <Link to={'/'}>\n              <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            </Link>\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Friday Fellows Updater\n          </Typography>\n          <MenuItem disableRipple component={NavLink} to={'/ondeck'} activeClassName={'activeLink'}>\n            <Button variant=\"contained\" className={classes.navButton}>On Deck</Button>\n          </MenuItem>\n          <MenuItem disableRipple component={NavLink} to={'/seasons'} activeClassName={'activeLink'}>\n            <Button variant=\"contained\" className={classes.navButton}>Seasons</Button>\n          </MenuItem>\n          <MenuItem disableRipple component={NavLink} to={'/admin'} activeClassName={'activeLink'}>\n            <Button variant=\"contained\" className={classes.navButton} disabled={true}>Admin</Button>\n          </MenuItem>\n          <div className={classes.grow} />\n          <Button color=\"inherit\">Login</Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nexport default AppHeader;\n","import React, { SyntheticEvent } from 'react';\nimport clsx from 'clsx';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { green } from '@material-ui/core/colors';\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\n\nconst variantIcon = {\n  success: CheckCircleIcon,\n  error: ErrorIcon,\n};\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  success: {\n    backgroundColor: green[600],\n  },\n  error: {\n    backgroundColor: theme.palette.error.dark,\n  },\n  icon: {\n    fontSize: 20,\n  },\n  iconVariant: {\n    opacity: 0.9,\n    marginRight: theme.spacing(1),\n  },\n  message: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n}));\n\nexport interface Props {\n  className?: string;\n  message?: string;\n  onClose?: () => void;\n  variant: keyof typeof variantIcon;\n}\n\nfunction MySnackbarContentWrapper(props: Props) {\n  const classes = useStyles({});\n  const { className, message, onClose, variant, ...other } = props;\n  const Icon = variantIcon[variant];\n\n  return (\n    <SnackbarContent\n      className={clsx(classes[variant], className)}\n      aria-describedby=\"client-snackbar\"\n      message={\n        <span id=\"client-snackbar\" className={classes.message}>\n          <Icon className={clsx(classes.icon, classes.iconVariant)} />\n          {message}\n        </span>\n      }\n      action={[\n        <IconButton key=\"close\" aria-label=\"close\" color=\"inherit\" onClick={onClose}>\n          <CloseIcon className={classes.icon} />\n        </IconButton>,\n      ]}\n      {...other}\n    />\n  );\n}\n\nexport function ErrorSnackbar({ open, msg, handleClose }: { open: boolean, msg: string, handleClose: Function }) {\n\n  function onClose(e?: SyntheticEvent, reason?: string) {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    handleClose(false)\n  }\n\n  return (\n    <Snackbar\n      anchorOrigin={{\n        vertical: 'bottom',\n        horizontal: 'left',\n      }}\n      open={open}\n      autoHideDuration={6000}\n      onClose={onClose}\n    >\n      <MySnackbarContentWrapper\n        onClose={onClose}\n        variant=\"error\"\n        message={msg}\n      />\n    </Snackbar>\n  );\n}\n\nexport function SuccessSnackbar({ open, msg, handleClose }: { open: boolean, msg: string, handleClose: Function }) {\n\n  function onClose(e?: SyntheticEvent, reason?: string) {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    handleClose(false)\n  }\n\n  return (\n    <Snackbar\n      anchorOrigin={{\n        vertical: 'bottom',\n        horizontal: 'left',\n      }}\n      open={open}\n      autoHideDuration={3000}\n      onClose={onClose}\n    >\n      <MySnackbarContentWrapper\n        onClose={onClose}\n        variant=\"success\"\n        message={msg}\n      />\n    </Snackbar>\n  );\n}\n","import React from 'react';\nimport './OnDeck.css';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableBody from '@material-ui/core/TableBody';\nimport { OnDeckReport } from '../../../model/firestore';\nimport { CircularProgress } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    header: {\n      ...theme.typography.button,\n      padding: theme.spacing(1),\n      marginLeft: 'auto',\n      marginRight: 'auto',\n      marginBottom: theme.spacing(2),\n      width: 'fit-content',\n    },\n    headerSegment: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1),\n    },\n    paperBody: {\n      margin: 'auto',\n      maxWidth: '60vw',\n    },\n    table: {\n      minWidth: 650,\n    },\n  }),\n);\n\ninterface OnDeckProps {\n  report?: OnDeckReport;\n  loading: boolean;\n}\n\nconst OnDeck: React.FC<OnDeckProps> = ({ report, loading = false }) => {\n  const classes = useStyles();\n\n  function formatTargetDate(targetDate: number | undefined) {\n    if (!targetDate) {\n      return 'Unknown';\n    }\n\n    return new Intl.DateTimeFormat('en-US', {\n      year: 'numeric',\n      month: 'numeric',\n      day: '2-digit'\n    }).format(new Date(targetDate));\n  }\n\n  return (\n    <div>\n      <Paper className={classes.header}>\n        <span className={classes.headerSegment}>{report?.seasonName}</span>\n        <span className={classes.headerSegment}>Week {report?.week}</span>\n        <span className={classes.headerSegment}>Next Session: {formatTargetDate(report?.targetWatchDate)}</span>\n      </Paper>\n      <Paper className={classes.paperBody}>\n        <Table className={classes.table} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Series Title (English)</TableCell>\n              <TableCell align=\"right\">Episode</TableCell>\n            </TableRow>\n          </TableHead>\n          {!loading && report &&\n            <TableBody>\n              {report.series.map((series) => (\n                <TableRow key={series.title.raw}>\n                  <TableCell component=\"th\" scope=\"row\">{series.title.raw}</TableCell>\n                  <TableCell align=\"right\">{series.episode}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>}\n        </Table>\n        {loading && <CircularProgress size={60} />}\n      </Paper>\n    </div>\n  );\n}\n\nexport default OnDeck;\n","import React, { useReducer, useEffect, useState } from 'react';\nimport './App.css';\nimport { reducer, initialState } from '../state/reducer';\nimport { AppActions } from '../state/actions';\nimport axios from 'axios';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport SeasonList from './SeasonList';\nimport SeasonDetail from './SeasonDetail';\nimport AppHeader from './AppHeader';\nimport { SuccessSnackbar, ErrorSnackbar } from './Snackbars';\nimport OnDeck from './OnDeck';\nimport { SeasonModel, SeriesModel } from '../../../model/firestore';\nimport { SetSeasonStartDateRequest, SetSeriesIdRequest, GetOnDeckReportsResponse } from '../../../model/service';\n\ninterface AppProps {\n  backendURI: string;\n}\n\ninterface GetAllSeasonsResponse {\n  seasons: SeasonModel[];\n  lastSyncMs?: number;\n}\n\nconst App: React.FC<AppProps> = ({ backendURI }) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [successOpen, setSuccessOpen] = useState(false);\n  const [successMsg, setSuccessMsg] = useState('');\n  const [errorOpen, setErrorOpen] = useState(false);\n  const [errorMsg, setErrorMsg] = useState('');\n\n  // Load all season data on start using effect Hook\n  // https://www.robinwieruch.de/react-hooks-fetch-data\n  useEffect(() => {\n    const fetchSeasonData = async () => {\n      try {\n        dispatch(AppActions.fetchSeasonsStart());\n        const resp = await axios.get<GetAllSeasonsResponse>(backendURI + '/getAllSeasons');\n\n        const lastSyncMs = resp.data.lastSyncMs;\n        const lastSync = lastSyncMs ? new Date(lastSyncMs) : undefined\n        dispatch(AppActions.fetchSeasonsSuccess({ json: resp.data.seasons, lastSync }));\n      } catch (e) {\n        console.log(e);\n        // this.setState({...this.state, isFetching: false});\n      }\n    }\n\n    fetchSeasonData();\n  }, [backendURI])\n\n  useEffect(() => {\n    const fetchOnDeckData = async () => {\n      try {\n        dispatch(AppActions.fetchOnDeckStart());\n        const resp = await axios.get<GetOnDeckReportsResponse>(backendURI + '/getOnDeckReports');\n\n        const { reports } = resp.data;\n        if (reports && reports.length > 0) {\n          dispatch(AppActions.fetchOnDeckSuccess({ report: reports[0] }));\n        }\n      } catch (e) {\n        console.log(e);\n        // TODO: dispatch fail action and log the error\n      }\n    }\n\n    fetchOnDeckData();\n  }, [backendURI]);\n\n  const handleStartDateChanged = async (newDate: Date | null, season: SeasonModel) => {\n    const payload: SetSeasonStartDateRequest = {\n      sheetId: season.sheetId,\n      startDate: newDate ? newDate.getTime() : null,\n    }\n    const resp = await axios.post(backendURI + '/setSeasonStartDate', payload)\n    if (resp.status === 200) {\n      dispatch(AppActions.setSeasonStartDate({\n        season: season,\n        startDate: newDate,\n      }))\n    }\n  }\n\n  const handleSeriesIdChanged = async (series: SeriesModel, seasonId: number, seriesId: number) => {\n    const payload: SetSeriesIdRequest = {\n      seasonId: seasonId,\n      row: series.rowIndex,\n      seriesId: seriesId,\n    }\n    try {\n      const resp = await axios.post(backendURI + '/setSeriesId', payload)\n      if (resp.status === 200) {\n        dispatch(AppActions.setSeriesId({\n          series: series,\n          data: resp.data.data,\n        }));\n        setSuccessMsg(`Updated AniList ID for ${series.title.raw}`);\n        setSuccessOpen(true);\n      }\n    } catch (e) {\n      // console.log(e); // log the error\n      setErrorMsg(`Error when updating AniList ID for ${series.title.raw}`);\n      setErrorOpen(true);\n    }\n  }\n\n  function AppFooter() {\n    return (\n      <div className=\"App-footer\">\n        <a href=\"https://github.com/brisberg/friday-fellows-gcf\">Github</a>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <AppHeader />\n      <div className=\"App-body\">\n        <Switch>\n          <Route exact={true} path='/'>\n            <Redirect to='/ondeck' />\n          </Route>\n          <Route exact={true} path='/ondeck'>\n            <OnDeck report={state.ondeck} loading={state.loadingOnDeck} />\n          </Route>\n          <Route exact={true} path='/seasons'>\n            <SeasonList seasons={state.seasons} lastSyncDate={state.lastSync} loading={state.loadingSeasons} onStartDateChanged={handleStartDateChanged} />\n          </Route>\n          <Route path='/s/:seasonId' render={({ match }) => (\n            <SeasonDetail\n              dispatch={dispatch}\n              backendURI={backendURI}\n              season={state.seasons.find((season) => String(season.sheetId) === match.params.seasonId)}\n              seriesList={state.seriesForSeason}\n              onStartDateChanged={handleStartDateChanged}\n              onSeriesIdChanged={handleSeriesIdChanged} />\n          )} />\n        </Switch>\n      </div>\n      <AppFooter />\n      <SuccessSnackbar open={successOpen} msg={successMsg} handleClose={setSuccessOpen} />\n      <ErrorSnackbar open={errorOpen} msg={errorMsg} handleClose={setErrorOpen} />\n    </div>\n  );\n}\n\nexport default App;\n","export default function config(): AppConfig {\n  switch (process.env.NODE_ENV) {\n    case 'production':\n      return configProd;\n    case 'development':\n      return configDev;\n    default:\n      throw new Error('NODE_ENV not set');\n  }\n}\n\ninterface AppConfig {\n  BACKEND_URI: string;\n}\n\nconst configProd = {\n  BACKEND_URI: 'https://us-central1-driven-utility-202807.cloudfunctions.net'\n}\n\nconst configDev = {\n  BACKEND_URI: 'http://localhost:5001/driven-utility-202807/us-central1'\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport config from './config/config';\nimport * as serviceWorker from './serviceWorker';\n// Using HashRouter instead of BrowserRouter for use on Github Pages\nimport { HashRouter as Router } from 'react-router-dom';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { createMuiTheme } from '@material-ui/core';\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nReactDOM.render(\n  <ThemeProvider theme={darkTheme}>\n    <Router>\n      <App backendURI={config().BACKEND_URI} />\n    </Router>\n  </ThemeProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}