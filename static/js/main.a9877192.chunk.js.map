{"version":3,"sources":["state/action_utils.ts","state/actions.ts","state/reducer.ts","season-list/SeasonList.tsx","app/App.tsx","config/config.ts","serviceWorker.ts","index.tsx","app/logo.svg"],"names":["createActionPayload","actionType","p","payload","type","Season","FETCH_SEASONS","SET_SEASON_START_DATE","AppActions","fetchSeasons","setSeasonStartDate","initialState","seasons","reducer","state","action","json","map","season","index","seasonIdx","startDate","getTime","useStyles","makeStyles","root","overflowX","margin","table","minWidth","SeasonList","onStartDateChanged","classes","Paper","className","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","key","sheetId","component","scope","to","formattedName","year","Tooltip","title","Icon","utils","DateFnsUtils","disableToolbar","variant","format","autoOk","value","onChange","date","KeyboardButtonProps","SeasonDetail","seasonId","useParams","App","props","backendURI","useReducer","dispatch","fetchSeasonData","a","fetch","resp","data","handleStartDateChanged","newDate","axios","post","status","src","logo","alt","exact","path","onClick","configProd","BACKEND_URI","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.a9877192.chunk.js","sourcesContent":["// Written by Patrick Desjardins\n// https://patrickdesjardins.com/blog/typescript-with-strong-typed-action-when-using-usereducer-of-react-hooks\n\n/**\n * Create an action that has a strongly typed string literal name with a\n * strongly typed payload\n */\nexport function createActionPayload<TypeAction, TypePayload>(\n    actionType: TypeAction): (payload: TypePayload) =>\n    ActionsWithPayload<TypeAction, TypePayload> {\n  return (p: TypePayload): ActionsWithPayload<TypeAction, TypePayload> => {\n    return {payload: p, type: actionType};\n  };\n}\n\n/**\n * Create an action with no payload\n */\nexport function createAction<TypeAction>(actionType: TypeAction): () =>\n    ActionsWithoutPayload<TypeAction> {\n  return (): ActionsWithoutPayload<TypeAction> => {\n    return {type: actionType};\n  };\n}\n/**\n * Create an action with a payload\n */\nexport interface ActionsWithPayload<TypeAction, TypePayload> {\n  type: TypeAction;\n  payload: TypePayload;\n}\n\n/**\n * Create an action that does not have a payload\n */\nexport interface ActionsWithoutPayload<TypeAction> {\n  type: TypeAction;\n}\n\n/**\n * A very general type that means to be \"an object with a many field created\n * with createActionPayload and createAction\n */\ninterface ActionCreatorsMapObject {\n  [key: string]: (...args: any[]) =>\n      ActionsWithPayload<any, any>| ActionsWithoutPayload<any>;\n}\n\n/**\n * Use this Type to merge several action object that has field created with\n * createActionPayload or createAction E.g. type ReducerWithActionFromTwoObjects\n * = ActionsUnion<typeof ActionsObject1 &amp; typeof ActionsObject2>;\n */\nexport type ActionsUnion<A extends ActionCreatorsMapObject> =\n    ReturnType<A[keyof A]>;\n","import {ActionsUnion, createActionPayload} from './action_utils';\nimport {SeasonModel} from './reducer';\n\nexport const FETCH_SEASONS = 'ACTION_FETCH_SEASONS';\nexport const SET_SEASON_START_DATE = 'SET_SEASON_START_DATE';\n\nexport const AppActions = {\n  fetchSeasons:\n      createActionPayload<typeof FETCH_SEASONS, {json: SeasonModel[]}>(\n          FETCH_SEASONS),\n  setSeasonStartDate: createActionPayload<\n      typeof SET_SEASON_START_DATE,\n      {seasonIdx: number, startDate: Date | null}>(SET_SEASON_START_DATE)\n};\n\nexport type AllActions = ActionsUnion<typeof AppActions>;\n","import {AllActions, FETCH_SEASONS, SET_SEASON_START_DATE} from './actions';\n\nexport enum Season {\n  UNKNOWN = 0,\n  SPRING,\n  SUMMER,\n  FALL,\n  WINTER,\n}\n\nexport interface SeasonModel {\n  formattedName: string;  // ex. 'WINTER 2014'\n  year: number;\n  season: Season;\n  sheetId: number;  // id of the sheet in the source SpreadSheet\n  // date of the first episode viewing this season in mills. null if not set\n  startDate: number|null;\n}\n\ninterface AppState {\n  seasons: SeasonModel[]\n}\n\nexport const initialState: AppState = {\n  seasons: []\n}\n\nexport function reducer(state: AppState = initialState, action: AllActions) {\n  switch (action.type) {\n    case FETCH_SEASONS:\n      return {\n        ...state, seasons: action.payload.json,\n      }\n    case SET_SEASON_START_DATE:\n      return {\n        ...state, seasons: state.seasons.map((season, index) => {\n          if (index !== action.payload.seasonIdx) {\n            // This isn't the item we care about - keep it as-is\n            return season\n          }\n\n          // Otherwise, this is the one we want - return an updated value\n          const startDate = action.payload.startDate;\n          return {\n            ...season, startDate: startDate ? startDate.getTime() : null,\n          }\n        })\n      }\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport './SeasonList.css';\nimport { SeasonModel } from '../state/reducer';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { Icon, Tooltip } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\n\nconst useStyles = makeStyles({\n  root: {\n    overflowX: 'auto',\n    margin: '0 10px',\n  },\n  table: {\n    minWidth: 650,\n  },\n});\n\ninterface SeasonListProps {\n  seasons: SeasonModel[];\n  onStartDateChanged: (date: Date | null, season: SeasonModel, index: number) => void;\n}\n\nconst SeasonList: React.FC<SeasonListProps> = ({ seasons, onStartDateChanged }) => {\n  const classes = useStyles({});\n\n  return (\n    <div>\n      <p>Seasons JSON:</p>\n      <Paper className={classes.root}>\n        <Table className={classes.table} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Season Name</TableCell>\n              <TableCell align=\"right\">Season</TableCell>\n              <TableCell align=\"right\">Year</TableCell>\n              <TableCell align=\"right\">Start&nbsp;Date&nbsp;(ms)</TableCell>\n              <TableCell align=\"right\">Sheet&nbsp;ID</TableCell>\n            </TableRow>\n          </TableHead>\n          {/* TODO Add an empty state message and a loading spinner */}\n          <TableBody>\n            {seasons.map((season, index) => (\n              <TableRow key={season.sheetId}>\n                <TableCell component=\"th\" scope=\"row\">\n                  <Link to={'/s/' + season.sheetId}>\n                    {season.formattedName}\n                  </Link>\n                </TableCell>\n                <TableCell align=\"right\">{season.season}</TableCell>\n                <TableCell align=\"right\">{season.year}</TableCell>\n                <TableCell align=\"right\">\n                  {season.startDate === null && <Tooltip title=\"Missing Start Date\">\n                    <Icon className=\"push-right warning-icon text-top\">warning</Icon>\n                  </Tooltip>}\n                  <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                    <KeyboardDatePicker\n                      disableToolbar\n                      variant=\"inline\"\n                      format=\"MM/dd/yyyy\"\n                      autoOk={true}\n                      value={season.startDate}\n                      onChange={(date) => { onStartDateChanged(date, season, index); }}\n                      KeyboardButtonProps={{\n                        'aria-label': 'change date',\n                      }}\n                    />\n                  </MuiPickersUtilsProvider>\n                </TableCell>\n                <TableCell align=\"right\">{season.sheetId}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </Paper>\n    </div>\n  );\n}\n\nexport default SeasonList;\n","import React, { useReducer } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { reducer, initialState, SeasonModel } from '../state/reducer';\nimport { AppActions } from '../state/actions';\nimport axios from 'axios';\nimport { Route, Link, Switch, useParams } from 'react-router-dom';\nimport SeasonList from '../season-list/SeasonList'\n\ninterface AppProps {\n  backendURI: string;\n}\n\nconst App: React.FC<AppProps> = (props) => {\n  const { backendURI } = props;\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const fetchSeasonData = async () => {\n    const resp = await fetch(backendURI + '/getAllSeasons')\n    const data = await resp.json();\n    dispatch(AppActions.fetchSeasons({ json: data }));\n  };\n\n  const handleStartDateChanged = async (newDate: Date | null, season: SeasonModel, index: number) => {\n    const resp = await axios.post(backendURI + '/setSeasonStartDate', {\n      sheetId: season.sheetId,\n      startDate: newDate ? newDate.getTime() : null,\n    })\n    if (resp.status === 200) {\n      dispatch(AppActions.setSeasonStartDate({\n        seasonIdx: index,\n        startDate: newDate,\n      }))\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>Friday Fellows Updater - Season List</p>\n      </header>\n      <div className=\"App-body\">\n        <Switch>\n          <Route exact={true} path=\"/\">\n            <SeasonList seasons={state.seasons} onStartDateChanged={handleStartDateChanged} />\n          </Route>\n          <Route path=\"/s/:seasonId\" component={SeasonDetail} />\n        </Switch>\n      </div>\n      <div className=\"App-footer\">\n        <button onClick={fetchSeasonData}>Fetch Season Data</button>\n      </div>\n    </div>\n  );\n}\n\nfunction SeasonDetail() {\n  const { seasonId } = useParams();\n  return (\n    <div>\n      <Link to={\"/\"}>Back</Link>\n      <p>{seasonId}</p>\n    </div>\n  );\n}\n\nexport default App;\n","export default function config(): AppConfig {\n  switch (process.env.NODE_ENV) {\n    case 'production':\n      return configProd;\n    case 'development':\n      return configDev;\n    default:\n      throw new Error('NODE_ENV not set');\n  }\n}\n\ninterface AppConfig {\n  BACKEND_URI: string;\n}\n\nconst configProd = {\n  BACKEND_URI: 'https://us-central1-driven-utility-202807.cloudfunctions.net'\n}\n\nconst configDev = {\n  BACKEND_URI: 'http://localhost:5001/driven-utility-202807/us-central1'\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport config from './config/config';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <Router>\n    <App backendURI={config().BACKEND_URI} />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}